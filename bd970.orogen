name "bd970"
# Optionally declare the version number
# version "0.1"

# If new data types need to be defined, they have to be put in a separate C++
# header, and this header will be loaded here
import_types_from "bd970Types.hpp"

# If this project uses data types that are defined in other oroGen projects,
# these projects should be imported there as well.
import_types_from "base"

# Finally, it is pretty common that headers are directly loaded from an external
# library. In this case, the library must be first used (the name is the
# library's pkg-config name) and then the header can be used. Following Rock
# conventions, a common use-case would be:
#
# using_library "bd970"
# import_types_from "bd970/CustomType.hpp"


# Declare a new task context (i.e., a component)
#
# The corresponding C++ class can be edited in tasks/Task.hpp and
# tasks/Task.cpp, and will be put in the bd970 namespace.
task_context "Task" do
    # This is the default from now on, and should not be removed. Rock will
    # transition to a setup where all components use a configuration step.
    needs_configuration

    #***************************
    #**** Driver Properties ****
    #***************************
    property('port', '/std/string', "/dev/ttyXR0").
        doc 'the device port'

    property('baudrate', 'int', 38400).
        doc 'Baud rate to open the serial com_port.'

    property('timeout', 'double', 1.0).
        doc 'the expected time (in seconds) to have a whole package in the fd (the device port)';

    #******************************
    #******* Output Ports *********
    #******************************
    output_port('pose_samples_out', '/base/samples/RigidBodyState').
        doc "computed position and orientation in the UTM coordinate provided and local to the origin"

    # If you want that component's updateHook() to be executed when the "input"
    # port gets data, uncomment this and comment the 'periodic' line
    # port_driven "input"
    #need to be peirodic because there is no FD
    periodic 1.0
end

